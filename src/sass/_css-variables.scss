@import 'config';

@function numberedValue($value){
    @if type-of($value) == 'string' {
        @return $value;
    } @else {
        @return #{$value}px;
    }
}

:root {
    --media-query: #{$mediaQuery};
    --columns: #{$columns};

    --base-spacing: #{numberedValue($baseSpacing)};

    @each $name, $value in $breakpoints {
        --breakpoint-#{$name}: #{numberedValue($value)};
    }


    @each $name, $value in $gutterWidth {
        --gutter-width-#{$name}: #{numberedValue($value)};
    }

    @each $name, $value in $containerPaddingWidth {
        --container-padding-#{$name}: #{numberedValue($value)};
    }

    @each $name, $value in $container {
        @if $value == 'fluid' {
            --container-#{$name}: 100%;
        } @else {
            --container-#{$name}: #{numberedValue($value)};
        }
    }
}

@function breakpoint($name){
    @if not map-get($breakpoints, $name){
        @error "Breakpoint `#{$name}` not found.";
    }

    @return var(--breakpoint-#{unquote($name)});
}

@function columns(){
    @return var(--columns);
}

@function container($name){
    @if not map-get($container, $name){
        @error "Container `#{$name}` not found.";
    }

    @return var(--container-#{unquote($name)});
}

@function gutterWidth($name){
    @if not map-get($gutterWidth, $name){
        @error "GutterWidth `#{$name}` not found.";
    }

    @return var(--gutter-width-#{unquote($name)});
}

@function containerPadding($name){
    @if not map-get($containerPaddingWidth, $name){
        @error "Container Padding `#{$name}` not found.";
    }

    @return var(--container-padding-#{unquote($name)});
}

@function baseSpacing(){
    @return var(--base-spacing);
}

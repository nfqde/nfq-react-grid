@use "config" as config;
@use "variables" as vars;

.col {
    box-sizing: border-box;
}

$colSizes: (
    'auto': 'auto',
    'max': 'max-content',
    'min': 'min-content'
);

@mixin colElement($dimension) {
    $dimensionString: '-';

    @if $dimension != 'xs' {
        $dimensionString: -#{unquote($dimension)}-;
    };

    @each $sizeName, $value in $colSizes {
        .col#{$dimensionString}#{$sizeName} {
            flex: 0 0 unquote($value);

            @if $sizeName == 'auto' {
                max-width: 100%;
            } @else {
                max-width: unquote($value);
            }
        }
    }

    @for $i from 1 through config.$columns {
        $width: calc(100% / var(--columns) * #{$i} - var(--current-row-gap) + var(--current-row-gap) * #{$i} / var(--columns));

        .col#{$dimensionString}#{$i} {
            flex: 0 0 $width;
            max-width: $width;
        }

        .col-offset#{$dimensionString}#{$i} {
            margin-left: calc(100% / var(--columns) * #{$i} + var(--current-row-gap) * #{$i} / var(--columns));
        }
    }

    @each $align, $value in vars.$align-items {
        .col-align#{$dimensionString}#{unquote($align)} {
            align-items: $value;
        }
        .col-align-self#{$dimensionString}#{unquote($align)} {
            align-self: $value;
        }
    }

    @each $justify, $value in vars.$justify-content {
        .col-justify#{$dimensionString}#{unquote($justify)} {
            justify-content: $value;
        }
        .col-justify-self#{$dimensionString}#{unquote($justify)} {
            justify-self: $value;
        }
    }
}
import React from 'react';

import {useScreenSizeProvider} from './useScreenSizeProvider';

import type {Breakpoints} from '../../sharedTypes/breakpointTypes';
import type {WithChildren} from '../../sharedTypes/componentTypes';

type ContextData = ReturnType<typeof useScreenSizeProvider>;

const defaultData = {
    // eslint-disable-next-line @nfq/no-magic-numbers
    screenSize: 'xxl' as Breakpoints,
    skeletonStore: {
        get: () => undefined,
        register: () => undefined,
        subscribe: () => undefined
    }
} as unknown as ContextData;

export const ScreenSizeContext = React.createContext<ContextData>(defaultData);

/**
 * Provides screen size context to child components based on the current breakpoint.
 * The `ScreenSizeProvider` component wraps its children with the `ScreenSizeContext.Provider`
 * and supplies the context value generated by `useScreenSizeProvider()`. This enables all nested
 * components to access the current screen size and related responsive utilities (such as `skeletonStore`)
 * using the `useScreenSize` or similar hooks.
 * It should be placed high in the component tree, ideally around layout or page-level components,
 * to ensure consistent breakpoint detection throughout the app.
 *
 * @param props          The component props.
 * @param props.children The child components that require access to the screen size context.
 * @returns A context provider wrapping the children with responsive screen size data.
 *
 * @example
 * ```tsx
 * <ScreenSizeProvider>
 *   <App />
 * </ScreenSizeProvider>
 * ```
 */
const ScreenSizeProvider = ({children}: WithChildren) => {
    const context = useScreenSizeProvider();

    return (
        <ScreenSizeContext.Provider value={context}>{children}</ScreenSizeContext.Provider>
    );
};

ScreenSizeProvider.displayName = 'ScreenSizeProvider';

export {ScreenSizeProvider};